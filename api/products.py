"""
Product API routes.
"""

from typing import List, Optional
from uuid import UUID
from fastapi import APIRouter, Depends, status, Request, Query
from sqlalchemy.ext.asyncio import AsyncSession

from infrastructure.database import get_async_session
from controllers.product_controller import ProductController
from middleware.auth import require_permissions
from models.schemas import (
    ProductCreate, ProductUpdate, ProductResponse, ProductListResponse,
    StandardResponse, PaginatedResponse, PaginationParams
)
from middleware.rate_limit import limiter

router = APIRouter(prefix="/products", tags=["Products"])


@router.post(
    "",
    response_model=StandardResponse[ProductResponse],
    status_code=status.HTTP_201_CREATED,
    summary="Create a new product",
    description="Create a new product. Requires 'product:create' permission.",
    dependencies=[Depends(require_permissions("product:create"))]
)
@limiter.limit("10/minute")
async def create_product(
    request: Request,
    product_data: ProductCreate,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Create a new product.

    - **name**: Product name (required)
    - **slug**: URL-friendly slug (autogenerated if not provided)
    - **category_id**: ID of the category this product belongs to (required)
    - **base_price**: The base price of the product (required)
    - **description**: Detailed product description
    - **is_active**: Whether the product is available for purchase
    
    **Required Permission**: `product:create`
    """
    # The user is already resolved and checked by require_permissions dependency
    return await ProductController.create_product(product_data, session)


@router.get(
    "",
    response_model=PaginatedResponse[ProductListResponse],
    summary="List products",
    description="Get a paginated list of products. Can be filtered by category."
)
async def list_products(
    pagination: PaginationParams = Depends(),
    category_id: Optional[UUID] = Query(None, description="Filter by category ID"),
    is_featured: Optional[bool] = Query(None, description="Filter by featured products"),
    session: AsyncSession = Depends(get_async_session)
):
    """
    Retrieve a list of products.

    - **page**: Page number for pagination.
    - **page_size**: Number of items per page.
    - **category_id**: Filter products belonging to a specific category.
    - **is_featured**: Filter for products that are marked as featured.
    
    **Permissions**: None required (public endpoint)
    """
    return await ProductController.list_products(pagination, category_id, is_featured, session)


@router.get(
    "/{product_id}",
    response_model=StandardResponse[ProductResponse],
    summary="Get a single product",
    description="Get detailed information about a single product by its ID."
)
async def get_product(
    product_id: UUID,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Get a single product by its UUID.
    
    **Permissions**: None required (public endpoint)
    """
    return await ProductController.get_product(product_id, session)

@router.get(
    "/slug/{slug}",
    response_model=StandardResponse[ProductResponse],
    summary="Get a single product by slug",
    description="Get detailed information about a single product by its URL slug."
)
async def get_product_by_slug(
    slug: str,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Get a single product by its unique slug.
    
    **Permissions**: None required (public endpoint)
    """
    return await ProductController.get_product_by_slug(slug, session)


@router.put(
    "/{product_id}",
    response_model=StandardResponse[ProductResponse],
    summary="Update a product",
    description="Update an existing product's information. Requires 'product:update' permission.",
    dependencies=[Depends(require_permissions("product:update"))]
)
@limiter.limit("10/minute")
async def update_product(
    request: Request,
    product_id: UUID,
    product_data: ProductUpdate,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Update a product's details by its ID.
    
    **Required Permission**: `product:update`
    """
    return await ProductController.update_product(product_id, product_data, session)


@router.delete(
    "/{product_id}",
    response_model=StandardResponse[bool],
    status_code=status.HTTP_200_OK,
    summary="Delete a product",
    description="Delete a product. Requires 'product:delete' permission.",
    dependencies=[Depends(require_permissions("product:delete"))]
)
@limiter.limit("5/minute")
async def delete_product(
    request: Request,
    product_id: UUID,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Permanently delete a product by its ID.
    
    **Required Permission**: `product:delete`
    """
    return await ProductController.delete_product(product_id, session) 