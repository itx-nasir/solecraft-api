
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solecraft_postgres
    environment:
      POSTGRES_DB: solecraft_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - solecraft_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: solecraft_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - solecraft_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for Message Broker
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: solecraft_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    networks:
      - solecraft_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solecraft_api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/solecraft_db
      DATABASE_URL_SYNC: postgresql://postgres:postgres@postgres:5432/solecraft_db
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Celery
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # JWT
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-this-in-production
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30
      
      # App Settings
      APP_NAME: SoleCraft API
      APP_VERSION: 1.0.0
      DEBUG: "true"
      ENVIRONMENT: development
      
      # Email (configure with your SMTP settings)
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
      EMAIL_FROM: noreply@solecraft.com
      
      # File Upload
      UPLOAD_DIR: uploads
      MAX_FILE_SIZE: 5242880
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 60
      
      # Pagination
      DEFAULT_PAGE_SIZE: 20
      MAX_PAGE_SIZE: 100
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - solecraft_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solecraft_celery_worker
    command: celery -A workers.celery_app worker --loglevel=info --concurrency=2
    environment:
      # Same environment as API
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/solecraft_db
      DATABASE_URL_SYNC: postgresql://postgres:postgres@postgres:5432/solecraft_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
      EMAIL_FROM: noreply@solecraft.com
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - solecraft_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solecraft_celery_beat
    command: celery -A workers.celery_app beat --loglevel=info
    environment:
      # Same environment as API
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/solecraft_db
      DATABASE_URL_SYNC: postgresql://postgres:postgres@postgres:5432/solecraft_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - solecraft_network
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solecraft_flower
    command: celery -A workers.celery_app flower --port=5555
    environment:
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - solecraft_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  solecraft_network:
    driver: bridge 